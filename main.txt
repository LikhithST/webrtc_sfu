package main

import (
	"encoding/base64"
	"encoding/json"
	"errors"
	"flag"
	"fmt"
	"io"
	"net/http"
	"strconv"

	"github.com/pion/interceptor"
	"github.com/pion/interceptor/pkg/intervalpli"
	"github.com/pion/webrtc/v4"
)

func main() {
	port := flag.Int("port", 8081, "http server port")
	flag.Parse()

	sdpChan := httpSDPServer(*port)
	channelA := make(chan string, 1) // Channel A to store SDP

	peerConnectionConfig := webrtc.Configuration{
		ICEServers: []webrtc.ICEServer{{URLs: []string{"stun:stun.l.google.com:19302"}}},
	}

	mediaEngine := &webrtc.MediaEngine{}
	if err := mediaEngine.RegisterDefaultCodecs(); err != nil {
		panic(err)
	}

	interceptorRegistry := &interceptor.Registry{}
	if err := webrtc.RegisterDefaultInterceptors(mediaEngine, interceptorRegistry); err != nil {
		panic(err)
	}

	intervalPliFactory, err := intervalpli.NewReceiverInterceptor()
	if err != nil {
		panic(err)
	}
	interceptorRegistry.Add(intervalPliFactory)

	peerConnection, err := webrtc.NewAPI(
		webrtc.WithMediaEngine(mediaEngine),
		webrtc.WithInterceptorRegistry(interceptorRegistry),
	).NewPeerConnection(peerConnectionConfig)
	if err != nil {
		panic(err)
	}
	defer peerConnection.Close()

	if _, err = peerConnection.AddTransceiverFromKind(webrtc.RTPCodecTypeVideo); err != nil {
		panic(err)
	}

	peerConnection.OnTrack(func(remoteTrack *webrtc.TrackRemote, receiver *webrtc.RTPReceiver) {
		localTrack, newTrackErr := webrtc.NewTrackLocalStaticRTP(remoteTrack.Codec().RTPCodecCapability, "video", "pion")
		if newTrackErr != nil {
			panic(newTrackErr)
		}

		rtpBuf := make([]byte, 1400)
		for {
			i, _, readErr := remoteTrack.Read(rtpBuf)
			if readErr != nil {
				panic(readErr)
			}
			if _, err = localTrack.Write(rtpBuf[:i]); err != nil && !errors.Is(err, io.ErrClosedPipe) {
				panic(err)
			}
		}
	})

	for {
		// Receive offer SDP
		offer := <-sdpChan
		channelA <- offer // Store SDP in Channel A

		peerConnection.SetRemoteDescription(decode(offer))
		answer, _ := peerConnection.CreateAnswer(nil)
		peerConnection.SetLocalDescription(answer)
		<-webrtc.GatheringCompletePromise(peerConnection)

		encodedAnswer := encode(peerConnection.LocalDescription())
		channelA <- encodedAnswer // Store answer in Channel A
	}
}

func encode(obj *webrtc.SessionDescription) string {
	b, err := json.Marshal(obj)
	if err != nil {
		panic(err)
	}
	return base64.StdEncoding.EncodeToString(b)
}

func decode(in string) *webrtc.SessionDescription {
	b, err := base64.StdEncoding.DecodeString(in)
	if err != nil {
		panic(err)
	}
	var obj webrtc.SessionDescription
	if err = json.Unmarshal(b, &obj); err != nil {
		panic(err)
	}
	return &obj
}

func httpSDPServer(port int) chan string {
	sdpChan := make(chan string)

	http.HandleFunc("/offer", func(res http.ResponseWriter, req *http.Request) {
		body, _ := io.ReadAll(req.Body)
		sdpChan <- string(body)
		fmt.Fprintf(res, "SDP received")
	})

	http.HandleFunc("/answer", func(res http.ResponseWriter, req *http.Request) {
		select {
		case answer := <-sdpChan:
			fmt.Fprintf(res, answer)
		default:
			fmt.Fprintf(res, "No SDP available")
		}
	})

	go func() {
		panic(http.ListenAndServe(":"+strconv.Itoa(port), nil))
	}()

	return sdpChan
}
